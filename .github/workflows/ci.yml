name: CI/CD for MySQL and Web App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_push_mysql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: us-east-1

      - name: Build MySQL Docker image
        run: |
          docker build -t mysql-database -f Dockerfile_mysql .
          docker tag mysql-database:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mysql-database:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mysql-database:latest

  build_and_push_webapp:
    runs-on: ubuntu-latest
    needs: build_and_push_mysql  # Web app build depends on MySQL build being successful
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          region: us-east-1

      - name: Build Web App Docker image
        run: |
          docker build -t employee-database-app -f Dockerfile .
          docker tag employee-database-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/employee-database-app:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/employee-database-app:latest

  deploy_to_ec2:
    runs-on: ubuntu-latest
    needs: build_and_push_webapp  # Deploy only after both images are pushed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          script: |
            # Pull latest MySQL and Web App images
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mysql-database:latest
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/employee-database-app:latest

            # Stop and remove existing containers (if running)
            docker stop mysql-db || true
            docker rm mysql-db || true
            docker stop web-app || true
            docker rm web-app || true

            # Run MySQL container
            docker run -d --name mysql-db -e MYSQL_ROOT_PASSWORD=rootpassword \
              -p 3306:3306 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/mysql-database:latest

            # Run Web App container with MySQL linked
            docker run -d -p 8080:8080 --name web-app --link mysql-db:mysql \
              -e DBHOST=mysql-db -e DBPORT=3306 \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/employee-database-app:latest
